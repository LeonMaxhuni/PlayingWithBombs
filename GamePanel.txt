import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import javax.swing.JPanel;
import javax.swing.plaf.DimensionUIResource;

public class GamePanel extends JPanel implements Runnable{

    int frameWidth = 960;
    int frameHeight = 832;

    int blockSize = 64;
    int FPS = 60;

    Thread myThread;
    Keybindings myBinds = new Keybindings();
    Bombs myBombs = new Bombs();
    MyMap mappy;
    int myMap1;

    public GamePanel() {
        this.addKeyListener(myBinds);
        this.setPreferredSize(new DimensionUIResource(frameWidth,frameHeight));
        this.setBackground(Color.GREEN);
        this.setVisible(true);
        this.setOpaque(true);
        this.setFocusable(true);
    }

    public void startMyThread() {
        myThread = new Thread(this);
        myThread.start();
    }

    public Player player1 = new Player(64, 64,1);
    public Player player2 = new Player(832, 704, 2);

    @Override
    public void run() {

        double drawInterval = 1000000000/FPS;
        double delta = 0;
        long lastTime = System.nanoTime();
        long currentTime;
        long reachOne = 0;
        //int showFPS = 0;

        while(myThread != null) {

            currentTime = System.nanoTime();
            delta += (currentTime - lastTime) / drawInterval;
            reachOne += (currentTime - lastTime);
            lastTime = currentTime;

            if(delta >= 1) {
                update();
                repaint();
                delta--;
                //showFPS++;
            }

            if(reachOne >= 1000000000){
                //System.out.print(showFPS);
                reachOne = 0;
                //showFPS = 0;
            }
        }
    }

    public void update(){

        if(myBinds.A == true) {
            player1.playerX -= player1.speed;
        }
        if(myBinds.W == true) {
            player1.playerY -= player1.speed;
        }
        if(myBinds.S == true) {
            player1.playerY += player1.speed;
        }
        if(myBinds.D == true) {
            player1.playerX += player1.speed;
        }
        if(myBinds.Q == true) {
            myBombs.setLocation((player1.getX()+32)/blockSize, ((player1.getY()+32)/blockSize));
        }

        if (System.currentTimeMillis() > myBombs.end && myBombs.firstBomb == true) {
            boolean bomb1Explosion = myBombs.firstRemove();
            if (bomb1Explosion == true) {
                updateMap(myBombs.bomb1X, myBombs.bomb1Y);
                bomb1Explosion = false;
            }
        }
        if (System.currentTimeMillis() > myBombs.end2 && myBombs.secondBomb == true) {
            boolean bomb2Explosion = myBombs.secondRemove();
            if (bomb2Explosion == true) {
                updateMap(myBombs.bomb2X, myBombs.bomb2Y);
                bomb2Explosion = false;
            }
        }
        if (System.currentTimeMillis() > myBombs.end3 && myBombs.thirdBomb == true) {
            boolean bomb3Explosion = myBombs.thirdRemove();
            if (bomb3Explosion == true) {
                updateMap(myBombs.bomb3X, myBombs.bomb3Y);
                bomb3Explosion = false;
            }
        }
        
    }

    public void updateMap(int bombX, int bombY) {

        String midTopLine = (String)mappy.linelist.get(bombY-1);
        String midLine = (String)mappy.linelist.get(bombY);
        String midBottomLine = (String)mappy.linelist.get(bombY+1);

        //hotizontalRemoval

        if (midLine.charAt(bombX-1) == '2') {
            midLine = midLine.substring(0, bombX-1) + '1' + midLine.substring(bombX);
        }
        else if(bombX > 1 && midLine.charAt(bombX-2) == '2' && midLine.charAt(bombX-1) == '1'){
            midLine = midLine.substring(0, bombX-2) + '1' + midLine.substring(bombX-1);
        }

        if (midLine.charAt(bombX+1) == '2') {
            midLine = midLine.substring(0, bombX+1) + '1' + midLine.substring(bombX+2);
        }
        else if(bombX < 13 && midLine.charAt(bombX+2) == '2' && midLine.charAt(bombX+1) == '1'){
            midLine = midLine.substring(0, bombX+2) + '1' + midLine.substring(bombX+3);
        }

        mappy.linelist.set(bombY, midLine);

        //verticalRemoval

        if (midTopLine.charAt(bombX) == '2') {
            midTopLine = midTopLine.substring(0,bombX) + '1' + midTopLine.substring(bombX+1);
            mappy.linelist.set(bombY-1, midTopLine);
        }
        else if (bombY > 1) {
            String topLine = (String)mappy.linelist.get(bombY-2);
            if (topLine.charAt(bombX) == '2' && midTopLine.charAt(bombX) == '1') {
                topLine = topLine.substring(0, bombX) + '1' + topLine.substring(bombX+1);
                mappy.linelist.set(bombY-2, topLine);
            }
        }

        if (midBottomLine.charAt(bombX) == '2') {
            midBottomLine = midBottomLine.substring(0,bombX) + '1' + midBottomLine.substring(bombX+1);
            mappy.linelist.set(bombY+1, midBottomLine);
        }
        else if (bombY < 11) {
            String bottomLine = (String)mappy.linelist.get(bombY+2);
            if (bottomLine.charAt(bombX) == '2' && midBottomLine.charAt(bombX) == '1') {
                bottomLine = bottomLine.substring(0, bombX) + '1' + bottomLine.substring(bombX+1);
                mappy.linelist.set(bombY+2, bottomLine);
            }
        }
    }

    public void paintComponent(Graphics g) {
        super.paintComponent(g);

        if (myMap1 != 1)
        try {
            mappy = new MyMap();
            myMap1 = 1;
        } catch (Exception e) {
            System.out.println("SOMETHING IS WORNG WITH MAPPY");
        }

        Graphics2D g2 = (Graphics2D)g;
        mappy.drawImage(g2);

        Graphics2D g3 = (Graphics2D)g;

            if (myBombs.firstBomb == true) {
                g3.setColor(Color.CYAN);
                g3.fillRect(myBombs.bomb1X*blockSize, myBombs.bomb1Y*blockSize, 64, 64);
            }
            if (myBombs.secondBomb == true) {
                g3.setColor(Color.PINK);
                g3.fillRect(myBombs.bomb2X*blockSize, myBombs.bomb2Y*blockSize, 64, 64);  
            }
            if (myBombs.thirdBomb == true) {
                g3.setColor(Color.MAGENTA);
                g3.fillRect(myBombs.bomb3X*blockSize, myBombs.bomb3Y*blockSize, 64, 64);
            }

        Graphics2D g4 = (Graphics2D)g;
        g4.setColor(Color.RED);
        g4.fillRect(player1.getX(),player1.getY(),blockSize,blockSize);

        Graphics2D g5 = (Graphics2D)g;
        g5.setColor(Color.BLUE);
        g5.fillRect(player2.getX(),player2.getY(),blockSize,blockSize);
    }
}